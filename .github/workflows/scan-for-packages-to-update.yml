name: Scan for packages to update

on:
  repository_dispatch:
    types:
      - auto-update-packages-test
      - auto-update-packages

jobs:
  scan-for-packages-to-update:
    name: Scan all org repos for packages to update
    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.show_result.outputs.matrix }}

    steps:
      - name: show event payload
        run: echo ${{ github.event.client_payload.package_name }}, ${{ github.event.client_payload.package_version }}, ${{ github.event.client_payload.target_branch }}

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - uses: MultiRepoActions/actions/.github/actions/setup_node@main

      - name: query api to get all repos
        id: get_repos
        uses: actions/github-script@v7
        env:
          GITHUB_API_TOKEN: ${{ secrets.ACCESS_TOKEN_FOR_PR_AUTOMATION }}
        with:
          github-token: ${{ secrets.ACCESS_TOKEN_FOR_PR_AUTOMATION }}
          script: |
            const {default: script} = await import('${{ github.workspace }}/src/index.js');
            const repos = await script('MultiRepoActions', '${{ github.event.client_payload.package_name }}', '${{ github.event.client_payload.package_version }}');
            return repos

      # not sure if this will work, so lets try and show the result

      - name: show result of get_repos and output as an action output
        id: show_result
        run: echo "matrix=${{ steps.get_repos.outputs.result }}}" >> $GITHUB_OUTPUT

  emit-update-packages:
    name: emit update package events
    runs-on: ubuntu-latest
    needs: scan-for-packages-to-update
    strategy:
      matrix: ${{ fromJson(needs.scan-for-packages-to-update.outputs.matrix) }}
    steps:
      - name: show result for each repo
        run: echo "result=${{ matrix.repo }}"

      - name: Trigger Repo Dispatch
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.ACCESS_TOKEN_FOR_PR_AUTOMATION }}
          repository: ${{matrix.repo}} # Replace with the repository you want to dispatch to
          event-type: update-internal-packages # Replace with the event type you want to trigger
          client-payload: |
            {
                "package_name": "${{ github.event.client_payload.package_name }}",
                "package_version": "${{ github.event.client_payload.package_version }}",
                "target_branch": "${{ github.event.client_payload.target_branch }}"
            }

      # - name: show result for each repo
      #   run: echo "result=${{ fromJson(needs.scan-for-packages-to-update.outputs.result) }}"
